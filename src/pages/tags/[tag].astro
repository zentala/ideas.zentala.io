---
import MainLayout from "../../layouts/MainLayout.astro";
import DefaultCard from "../../components/DefaultCard.astro";
import { getCollection } from 'astro:content';
import { normalizeTag, getPostsByTag } from "../../utils.js";
import fs from 'fs';
import path from 'path';

// Generate static paths for all tags
export async function getStaticPaths() {
  // Load taxonomy if it exists
  let taxonomy = { bilingualTags: {}, synonymMap: {} };
  try {
    const taxonomyPath = path.join(process.cwd(), 'src/data/taxonomy.json');
    if (fs.existsSync(taxonomyPath)) {
      taxonomy = JSON.parse(fs.readFileSync(taxonomyPath, 'utf8'));
    }
  } catch (error) {
    console.warn('Could not load taxonomy:', error);
  }

  const posts = await getCollection('posts');
  
  // Try to get drafts, but handle the case when the collection doesn't exist
  let drafts = [];
  if (import.meta.env.DEV) {
    try {
      drafts = await getCollection('drafts');
    } catch (error) {
      console.warn('No drafts collection found or it is empty');
    }
  }
  
  const allPosts = [...posts, ...drafts];
  
  // Get all unique tags including synonyms, translate to English using taxonomy
  const allTags = allPosts
    .flatMap(post => post.data.tags || [])
    .map(tag => (taxonomy.synonymMap && taxonomy.synonymMap[tag]) || tag);
  const uniqueTags = [...new Set(allTags)];
  
  // Also add all canonical tags from the taxonomy
  if (taxonomy.bilingualTags) {
    Object.keys(taxonomy.bilingualTags).forEach(tag => uniqueTags.push(tag));
    Object.values(taxonomy.bilingualTags).forEach(data => {
      if (data.pl) uniqueTags.push(data.pl);
    });
  }
  
  // Generate a path for each tag
  return [...new Set(uniqueTags)].map(tag => {
    // For non-canonical tags, generate paths using their canonical form
    const canonicalTag = taxonomy.synonymMap && taxonomy.synonymMap[tag] 
      ? taxonomy.synonymMap[tag] 
      : tag;
    
    // Get all posts that match this tag or its synonyms
    const matchingPosts = getPostsByTag(allPosts, canonicalTag);
    
    // Get tag description in both languages
    let tagInfo = { en: '', pl: '' };
      
    if (taxonomy.bilingualTags && taxonomy.bilingualTags[canonicalTag]) {
      tagInfo = {
        en: taxonomy.bilingualTags[canonicalTag].enDescription || '',
        pl: taxonomy.bilingualTags[canonicalTag].plDescription || ''
      };
    }
    
    return {
      params: { tag },
      props: { 
        posts: matchingPosts,
        tagInfo,
        taxonomy // Przekazujemy taxonomy jako prop
      }
    };
  });
}

// Get the tag from params and filtered posts from props
const { tag } = Astro.params;
const { posts, tagInfo, taxonomy } = Astro.props;

// Set English as the only language
const currentLanguage = 'en';

// Get English equivalent of tag if it's Polish
const displayTag = (taxonomy && taxonomy.synonymMap && taxonomy.synonymMap[tag]) || tag;

// Include all posts regardless of language
const languageFilteredPosts = posts;

// Sort posts by date (using created from Git if available, otherwise pubDate)
const sortedPosts = languageFilteredPosts.sort((a, b) => {
  const dateA = new Date(a.data.created || a.data.pubDate);
  const dateB = new Date(b.data.created || b.data.pubDate);
  return dateB.valueOf() - dateA.valueOf();
});

// Get custom card components for posts that have them
const customCardComponents = import.meta.glob('../../components/custom-cards/*.{jsx,tsx,astro}');
---

<MainLayout 
  title={`Ideas tagged with ${tag}`}
  description={`Browse all ideas related to ${tag}`}
  language={currentLanguage}
>
  <div class="container mx-auto px-4">
    <header class="border-b border-white/10 pb-8 mb-12">
      <h1 class="text-4xl font-bold mb-4 text-center">
        Ideas tagged with <span class="text-[#5b34da]">{displayTag}</span>
      </h1>
      
      {(tagInfo.en || tagInfo.pl) && (
        <div class="max-w-2xl mx-auto mb-6 text-center">
          {currentLanguage === 'en' && tagInfo.en && <p class="text-white/80 mb-2">{tagInfo.en}</p>}
          {currentLanguage === 'pl' && tagInfo.pl && <p class="text-white/80 mb-2">{tagInfo.pl}</p>}
          {currentLanguage === 'en' && tagInfo.pl && <p class="text-white/60 italic">{tagInfo.pl}</p>}
          {currentLanguage === 'pl' && tagInfo.en && <p class="text-white/60 italic">{tagInfo.en}</p>}
        </div>
      )}
      
      <p class="text-center text-white/70 mb-6">Found {sortedPosts.length} idea{sortedPosts.length !== 1 ? 's' : ''}</p>
      
      <div class="flex justify-center">
        <a href="/tags" class="px-4 py-2 bg-[#2a2a2a] text-white/80 text-sm border border-white/10 
          hover:bg-[#3a3a3a] hover:border-[#5b34da]/50 transition-all">
          ‚Üê Back to all tags
        </a>
      </div>
    </header>
    
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 auto-rows-auto">
      {sortedPosts.map(post => {
        const { data, slug, collection } = post;
        const isDraft = data.draft || collection === 'drafts';
        
        // Generate URL
        const url = `/${collection}/${slug}`;
        
        // Custom cards are currently disabled until framework integrations are set up
        if (false) {
          // This code is disabled to prevent errors with custom components
          // We'll need to add the proper framework integration first
        } else {
          // Otherwise use the default card component
          return (
            <DefaultCard
              title={data.title}
              description={data.description}
              image={data.image}
              url={url}
              tags={data.tags}
              isDraft={isDraft}
              language={currentLanguage}
            />
          );
        }
      })}
    </div>
    
    <div class="text-center mt-12 pt-8 border-t border-white/10">
      <a href="/tags" class="inline-block px-6 py-3 bg-[#5b34da] text-white border border-[#5b34da]/50 hover:bg-[#4a2ab8] transition-colors">
        View All Tags
      </a>
    </div>
  </div>
</MainLayout>