---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from 'astro:content';

// Set English as the only language
const currentLanguage = 'en';

// Get all posts and drafts
const isDev = import.meta.env.DEV;
const posts = await getCollection('posts');

// Try to get drafts, but handle the case when the collection doesn't exist
let drafts = [];
if (isDev) {
  try {
    drafts = await getCollection('drafts');
  } catch (error) {
    console.warn('No drafts collection found or it is empty');
  }
}

// Include all posts regardless of language
const languageFilteredPosts = [...posts, ...drafts];

// Polish to English mapping for common tags
const plToEnMapping = {
  "platforma samochodowa": "car platform",
  "części samochodowe": "car parts", 
  "subskrypcja": "subscription",
  "geolokalizacja": "geolocation",
  "zdjęcia aut": "car photos",
  "ogłoszenia": "listings",
  "pomysły": "ideas",
  "innowacje": "innovations",
  "produkty": "products",
  "usługi": "services",
  "startup": "startup",
  "aplikacja": "application",
  "technologia": "technology",
  "motoryzacja": "automotive",
  "internet rzeczy": "IoT",
  "uczenie maszynowe": "machine learning",
  "biznes": "business",
  "przedsiębiorczość": "entrepreneurship",
  "prototyp": "prototype",
  "inwestycje": "investments",
  "edukacja": "education",
  "rozrywka": "entertainment",
  "społeczność": "community",
  "media społecznościowe": "social media"
};

// Get all unique tags and translate Polish tags to English
const allTags = languageFilteredPosts
  .flatMap(post => post.data.tags || [])
  .map(tag => plToEnMapping[tag] || tag);

const tags = [...new Set(allTags)].sort();

// Count posts per tag (considering both English and Polish versions)
const tagCounts = tags.reduce((acc, tag) => {
  // Get the Polish equivalent of this tag if it exists
  const polishTag = Object.entries(plToEnMapping).find(([pl, en]) => en === tag)?.[0];
  
  acc[tag] = languageFilteredPosts
    .filter(post => {
      if (!post.data.tags) return false;
      // Match either the English tag or its Polish equivalent
      return post.data.tags.includes(tag) || 
             (polishTag && post.data.tags.includes(polishTag));
    })
    .length;
  return acc;
}, {} as Record<string, number>);
---

<MainLayout 
  title="Browse Ideas by Tags"
  description="Browse all ideas organized by tags"
  language={currentLanguage}
>
  <div class="max-w-4xl mx-auto">
    <h1 class="text-4xl font-bold mb-8 text-center font-['Playfair_Display']">
      <span class="text-[#5b34da]">Browse</span> Ideas by Tags
    </h1>
    
    <div class="border border-white/10 p-8 bg-[#1a1a1a]">
      <div class="flex flex-wrap gap-4 justify-center">
        {tags.map(tag => {
          // Calculate font size based on tag frequency
          const count = tagCounts[tag];
          const fontSize = Math.max(0.8, Math.min(1.8, 0.8 + (count / 5) * 0.25));
          
          return (
            <a 
              href={`/tags/${tag}`}
              class="px-5 py-3 bg-[#2a2a2a] border border-white/10 
                hover:bg-[#3a3a3a] hover:border-[#5b34da]/50 transition-all flex items-center"
              style={`font-size: ${fontSize}rem;`}
            >
              <span class="font-medium font-['Montserrat']">{tag}</span>
              <span class="ml-2 px-3 py-0.5 bg-[#5b34da] text-white text-sm">
                {tagCounts[tag]}
              </span>
            </a>
          );
        })}
      </div>
    </div>
    
    <div class="mt-12 text-center">
      <a href="/" class="px-6 py-3 bg-[#5b34da] text-white border border-white/10 hover:bg-[#4a2ab8] transition-colors">
        Back to all ideas
      </a>
    </div>
  </div>
</MainLayout>