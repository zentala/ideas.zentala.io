---
interface Props {
  title: string;
  description?: string;
  image?: string;
  url: string;
  tags?: string[];
  isDraft?: boolean;
}

const { title, description, image, url, tags = [], isDraft = false } = Astro.props;
---

<a 
  href={url} 
  class={`
    relative card flex flex-col bg-[#1a1a1a] border border-white/10 overflow-hidden transition-all duration-300 hover:border-[#5b34da]
    ${isDraft ? 'opacity-85' : ''}
  `}
>
  {isDraft && (
    <div class="absolute top-0 right-0 bg-yellow-900/50 text-yellow-200 text-xs px-2 py-1 border-l border-b border-yellow-500/50 z-10">
      Draft
    </div>
  )}
  
  {image ? (
    <div class="card-image h-48 overflow-hidden">
      <img 
        src={image} 
        alt={title} 
        class="w-full h-full object-cover transition-transform duration-500 hover:scale-105" 
      />
    </div>
  ) : (
    <div class="card-image h-32 bg-gradient-to-r from-[#3b1d89] to-[#5b34da]"></div>
  )}
  
  <div class="card-content p-5 flex-1 flex flex-col">
    <h3 class="text-xl font-bold mb-3 text-white font-['Playfair_Display']">{title}</h3>
    
    {description && (
      <p class="text-white/80 text-sm mb-4 flex-1">{description}</p>
    )}
    
    {tags.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-auto">
        {tags.slice(0, 3).map(tag => (
          <span class="px-2 py-1 bg-[#2a2a2a] text-white/70 text-xs border border-white/5 hover:bg-[#3a3a3a] transition-colors">
            {tag}
          </span>
        ))}
        {tags.length > 3 && (
          <span class="px-2 py-1 bg-[#2a2a2a] text-white/70 text-xs border border-white/5">
            +{tags.length - 3}
          </span>
        )}
      </div>
    )}
  </div>
</a>